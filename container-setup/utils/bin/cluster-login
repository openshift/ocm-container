#!/usr/bin/python3
# Pulled from https://github.com/mbarnes/work-environment/blob/master/files/bin/srelogin
#
# Logs into an OpenShift Dedicated v4 cluster via the
# "OpenShift_SRE" identity provider. Requires a valid
# Kerberos ticket for production clusters.
#
# OCM_CONTAINER_DOC: Logs into an OpenShift Dedicated v4 cluster via the "OpenShift_SRE IDP"
#
# Setup instructions:
#
# 1. Install requests-html module
#    $ pip3 install requests-html
# 2. Install requests-kerberos module (check your distro)
#    apt: $ sudo apt install python3-requests-kerberos
#    yum: $ sudo yum install python3-requests-kerberos
#    pip: $ pip3 install requests-kerberos
# 3. Install Chromium for requests-html
#    $ pyppeteer-install
# 4. Get a Kerberos ticket
#    $ kinit
#
# OPTIONAL
# If you want to use the --socks-proxy option,
# such as for scripted access to Hive clusters:
#
# 5. Install socks module (check your distro)
#    apt: sudo apt install python3-socks
#    yum: sudo yum install python3-pysocks
#    pip: pip3 install PySocks
#

import argparse
import getpass
import json
import os
import shutil
import subprocess
import sys
import textwrap
import urllib

# 3rd-party modules
import requests
import requests_html
import requests_kerberos

DEFAULT_CLUSTER = os.environ.get('OCM_CLUSTERID')
DEFAULT_EMAIL = getpass.getuser() + '@redhat.com'
DEFAULT_OC_COMMAND = shutil.which('oc')
DEFAULT_OCM_COMMAND = shutil.which('ocm')

CLUSTERS_API_PATH = '/api/clusters_mgmt/v1/clusters/'
REQUEST_TOKEN_PATH = '/oauth/token/request'
OPENSHIFT_SRE_IDP = 'OpenShift_SRE'

# Override requests_html's default useragent
# string to avoid nastygrams from Red Hat IT.
# Note: fake_useragent does not guarantee an
# up-to-date operating system that satisfies
# Red Hat IT, so this is from my own browser.
requests_html.DEFAULT_USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'

# Mimics BaseUrlSession from requests-toolbelt,
# but implemented as a wrapper for HTMLSession.
class BaseUrlHTMLSession(requests_html.HTMLSession):

    base_url = None

    def __init__(self, base_url=None):
        if base_url:
            self.base_url = base_url
        super(BaseUrlHTMLSession, self).__init__()

    def request(self, method, url, *args, **kwargs):
        """Send the request after generating the complete URL."""
        url = self.create_url(url)
        return super(BaseUrlHTMLSession, self).request(method, url, *args, **kwargs)

    def create_url(self, url):
        """Create the URL based off this partial path."""
        return urllib.parse.urljoin(self.base_url, url)


def print_error(*args):
    error = ' '.join(args)
    text_wrapper = textwrap.TextWrapper(
        break_long_words=False,
        break_on_hyphens=False)
    for line in text_wrapper.wrap(error):
        print(line, file=sys.stderr)

def json_subprocess_run(args):
    return json.loads(subprocess.run(args, capture_output=True, check=True).stdout)

def get_cluster_urls(ocm_command, clusterid):
    search_params = f"search=display_name='{clusterid}' or name='{clusterid}' \
        or id='{clusterid}' or external_id='{clusterid}'"
    subprocess_args = [ocm_command, 'get', CLUSTERS_API_PATH,
        '--parameter', search_params]
    json_result = json_subprocess_run(subprocess_args)
    try:
        api_url = json_result['items'][0]['api']['url']
        console_url = json_result['items'][0]['console']['url']
    except KeyError as ex:
        reason = 'Missing cluster API and/or console URL'
        try:
            # Try to look up cluster state
            subprocess_args[-1] += '/status'
            json_result = json_subprocess_run(subprocess_args)
            cluster_state = json_result.get('state', 'ready')
            if cluster_state != 'ready':
                reason = 'Cluster is not ready (state: {})'.format(cluster_state)
        except:
            pass
        print_error(reason)
        sys.exit(1)
    oauth_url = console_url.replace('console-openshift-console', 'oauth-openshift')
    return api_url, oauth_url

def extract_form(response):
    form = response.html.find('form', first=True)
    inputs = [element.attrs for element in form.find('input')]
    data = {i['name']: i['value'] for i in inputs if 'name' in i and 'value' in i}
    return form.attrs['method'], form.attrs['action'], data

def init_kerberos():
    kinit_path = shutil.which('kinit')
    klist_path = shutil.which('klist')
    if kinit_path and klist_path:
        if subprocess.run([klist_path, '-s']).returncode != 0:
            print('Kerberos credentials expired')
            kinit_completion = subprocess.run(
                [kinit_path], stdin=sys.stdin,
                stdout=sys.stdout, stderr=sys.stderr)
            if kinit_completion.returncode != 0:
                sys.exit(1)
            return True
    return False

def authorize(session, email):
    response = session.get(REQUEST_TOKEN_PATH)
    response.raise_for_status()
    # Pick OpenShift_SRE login
    idp_dict = {idp.text: idp.links.pop() for idp in response.html.find('.idp')}
    if OPENSHIFT_SRE_IDP not in idp_dict:
        print_error('Identity provider "{}" not found'.format(OPENSHIFT_SRE_IDP))
        sys.exit(1)
    response = session.get(idp_dict[OPENSHIFT_SRE_IDP])
    while response.status_code == requests.codes.unauthorized and init_kerberos():
        response = session.get(idp_dict[OPENSHIFT_SRE_IDP])
    response.raise_for_status()
    # SAML HTTP Post Binding (production)
    if response.url.startswith('https://auth.redhat.com/'):
        method, url, data = extract_form(response)
        response = session.request(method, url, data=data)
        response.raise_for_status()
        # Redirecting...
        links = response.html.links
        if links:
            response = session.get(links.pop())
            response.raise_for_status()
    # Username/Password Form (staging/integration)
    while response.url.startswith(session.base_url + '/login/'):
        error = response.html.find('.error-placeholder p', first=True)
        if error:
            print_error(error.text)
        method, url, data = extract_form(response)
        if 'username' in data and 'password' in data:
            data['username'] = email.split('@')[0]
            data['password'] = getpass.getpass('Red Hat SSO Password (PIN+Token): ')
        response = session.request(method, url, data=data)
        response.raise_for_status()
    # Google Authentication Error
    # (Probably an unauthorized redirect URI)
    if response.url.startswith('https://accounts.google.com/signin/oauth/error'):
        error = response.html.find('form div[jsslot]', first=True)
        if error:
            print_error(error.text)
        sys.exit(1)
    # Google Authentication
    if response.url.startswith('https://accounts.google.com/'):
        method, url, data = extract_form(response)
        data['Email'] = email
        response = session.request(method, url, data=data)
        response.raise_for_status()
    return response

def main(args):
    api_url, oauth_url = get_cluster_urls(args.ocm_command, args.cluster)
    with BaseUrlHTMLSession(oauth_url) as session:
        if args.socks_proxy:
            session.proxies = {oauth_url: args.socks_proxy}
        session.auth = requests_kerberos.HTTPKerberosAuth(
            mutual_authentication=requests_kerberos.OPTIONAL)
        response = authorize(session, args.email)

        # Display Token
        method, url, data = extract_form(response)
        response = session.request(method, url, data=data)
        response.raise_for_status()

        token = response.html.find('code', first=True).text
        subprocess_args = [args.oc_command, 'login', api_url, '--token=' + token]
        if args.socks_proxy:
            os.environ['HTTPS_PROXY'] = args.socks_proxy
        subprocess.run(subprocess_args, stdout=sys.stdout, stderr=sys.stderr)

def help_and_default(help_string, default):
    kwargs = {}
    if default:
        kwargs['default'] = default
        help_string += ' (default: {})'.format(default)
    else:
        kwargs['required'] = True
    kwargs['help'] = help_string
    return kwargs

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--cluster', '-c', metavar='CLUSTERID',
        **help_and_default('"ocm" cluster ID or name', DEFAULT_CLUSTER))
    parser.add_argument(
        '--email', '-e', metavar='ADDRESS',
        **help_and_default('your Red Hat email address', DEFAULT_EMAIL))
    parser.add_argument(
        '--oc-command', metavar='PATH',
        **help_and_default('path to "oc" command', DEFAULT_OC_COMMAND))
    parser.add_argument(
        '--ocm-command', metavar='PATH',
        **help_and_default('path to "ocm" command', DEFAULT_OCM_COMMAND))
    parser.add_argument(
        '--socks-proxy', metavar='URL',
        help='SOCKS proxy for clusters requiring SSH port forwarding')
    main(parser.parse_args())
