#!/usr/bin/env python3
# OCM_CONTAINER_DOC: Extract the clusterid of the shard that is handling the provided cluster

import argparse
import json
import os
import subprocess
import sys


# convert_to_dict takes the subprocess.result and converts the stdout to a dict
# which makes manipulations of the data possible
# taken from https://stackoverflow.com/a/40060181
def convert_to_dict(res):
    stringified_bytes = res.stdout.decode("utf8").replace("'", '"')
    return json.loads(stringified_bytes)


# get_ocm_user calls `ocm whoami` and filters out the username from the response
# to use in generating cluster names
# copied from './create-cluster' as packages in python are problematic
def get_ocm_user():
    command = ["ocm", "whoami"]

    try:
        output = subprocess.run(command, capture_output=True, check=True)
    except subprocess.CalledProcessError:
        sys.stderr.write("Error retrieving user with `ocm whoami`; are you logged in?\n")
        sys.exit(1)

    ocm_response = json.loads(output.stdout)

    return ocm_response["username"]


parser = argparse.ArgumentParser(description="get-shard-clusterid")
parser.add_argument(
    "-c",
    "--cluster",
    default=os.getenv("CLUSTER"),
    help="""the cluster identifier (name/id/external) which you want to find it's shardid', can be set using the CLUSTER field """,
)
args = parser.parse_args()

if not args.cluster:
    parser.print_usage()
    sys.exit(1)
cluster = args.cluster

get_ocm_user()

cmd = "ocm get /api/clusters_mgmt/v1/clusters".split()
cmd.append(
    f"--parameter=search=name = '{cluster}' or id = '{cluster}' or external_id = '{cluster}' "
)
res = subprocess.run(cmd, capture_output=True)
described_clusters_raw = convert_to_dict(res)
described_clusters_count = len(described_clusters_raw["items"])
cluster_id = described_clusters_raw["items"][0]["id"]

if described_clusters_count != 1:
    sys.stderr.write(
        f"this script works only on one cluster, and {cluster} was not a unique identifier, there were {described_clusters_count} found\n"
    )
    sys.exit(1)

cmd = ["ocm", "get", f"/api/clusters_mgmt/v1/clusters/{cluster_id}/provision_shard"]
res = subprocess.run(cmd, capture_output=True)
provision_shard_raw = convert_to_dict(res)
shard_id = provision_shard_raw["id"]

res = subprocess.run("ocm config get url".split(), capture_output=True)
ocm_current_config_url = res.stdout.strip().decode("utf8")

shard_to_clusterid = {
    "https://api.stage.openshift.com": {  # stage
        "77d087e6-bf7f-11ea-a6df-8c1645a911be": {
            "cluster_id": "a38c8e34-03f6-4a5c-a7b2-28500942ac9b"
        },
        "11015a3e-9e4d-4cf1-93d7-06fb2cf83a1c": {
            "cluster_id": "87e97ea3-792d-4aef-8ad2-2f495d7e8e33"
        },
        "c591396e-b1e3-4d97-a7d4-8046ccb4d529": {"is_v3": True},
    },
    "https://api.openshift.com": {  # prod
        "7c2626e2-da06-11ea-8f62-8c1645a911be": {
            "cluster_id": "7872fb1d-919b-4df7-a609-653aac248703"
        },
        "de4b0632-dca7-11ea-b3b9-8c1645a911be": {
            "cluster_id": "59b2fbf5-6cd0-4fb0-b5f4-eef33b88fbf0"
        },
        "07285129-332e-4bb8-a85b-a06f1a365554": {
            "cluster_id": "b3f5afeb-d790-482c-b2a5-adf7d9cf2312"
        },
        "03f35bb5-c700-4658-a8f2-c25b76107a63": {
            "cluster_id": "19119e45-adb7-45a6-a57a-5276ec741200"
        },
        "b26159a7-aaef-4303-89a0-6713ad9f1090": {
            "cluster_id": "37db3b53-3f89-450e-92ce-1cc793391cdf"
        },
        "0c7d42ee-d751-4e5e-928d-838c4141ec20": {"is_v3": True},
    },
}

shards = shard_to_clusterid.get(ocm_current_config_url)
if not shards:
    sys.stderr.write(
        f"env url {ocm_current_config_url} is not found in the local datastructure\n"
    )
    sys.exit(1)

shard = shards.get(shard_id)
if not shard:
    sys.stderr.write(
        f"shard id {shard_id} is not found in the local datastructure under the ocm_current_config_url {ocm_current_config_url}\n"
    )
    sys.exit(1)

is_v3 = shard.get("is_v3")
if is_v3:
    sys.stderr.write(
        f"shard id {shard_id} under the ocm_current_config_url {ocm_current_config_url} is a v3 cluster, please use bastion to connect\n"
    )
    sys.exit(1)

print(shard["cluster_id"])
