---
### Example OCM Container Configuration.
#
# This file contains all of the configuration options
# available and their defaults and options.

# Set the container engine to use. Supported options are
# `podman` or `docker`. Defaults to podman
engine: podman

# Set the default image that ocm-container should use
# This is especially useful if you build your own layers on top
# of the default container
# this defaults to `quay.io/app-sre/ocm-container:latest`
image: quay.io/app-sre/ocm-container:latest

# env contains a kubernetes-style list of name:value pairs that
# are to be passed into the container. If only the `name` is
# provided, then that var will be passed from your local env
# Any env vars passed with `-e` into the ocm-container CLI
# invocation will override anything set within here, but otherwise
# anything with `-e` will be appended to this list
env:
  # equivelant of `podman run -e MY_CONFIG_VAR=myValue`
  - name: MY_CONFIG_VAR
    value: myValue
  # the following will pass the value of SOME_SECRET_TOKEN
  # directly from your local env without exposing the value
  # equivelant of `podman run -e SOME_SECRET_TOKEN`
  - name: SOME_SECRET_TOKEN

# The following block contains optional formatting directives for
# the ocm-container logger
log:
  # Level can be one of debug, info, warn, warning, err, error.
  # Defaults to warning
  level: warning

  # Color allows you to disable log format coloring. It is enabled
  # only in a TTY by default. Set this to false to disable colors
  color: true

# volumeMounts contains a list of local directories to pass
# into the container as additional volumes.
volumeMounts:
  - /path/to/local/dir:/root/dir

# Individual feature configuration
features:

  # The Additional Cluster Envs integration automatically exports
  # cluster-related environment variables when logging into a cluster
  # with --cluster-id
  additional_cluster_envs:
    # Enable or disable the additional cluster environment variables
    # Default: true
    enabled: true

  # The certificate authorities functionality automatically
  # mounts your trusted certificates inside the container
  certificate_authorities:
    # Enable or disable the CA integration
    # Defaults to true
    enabled: true

    # Optional path to the source anchors folder on your host
    # to mount in the container. Default is as shown:
    source_anchors: /etc/pki/ca-trust/source/anchors


  # The GCP integration mounts the google cloud CLI directory
  # and passes it to the default location within the container.
  gcloud:
    # Enable or disable the gcloud integration
    # Defaults to true
    enabled: true

    # Optional path to the gcp config directory, defaults
    # to ~/.config/gcloud
    config_file: .config/gcloud

  # The JIRA integration mounts JIRA env vars and
  # config file to be able to use the JIRA cli
  # within the container
  jira:
    # Enable or disable the JIRA integration
    # Defaults to true
    enabled: true

    # Optional path to the config.yml file, defaults
    # to ~/.jira/.config.yml
    config_file: .jira/.config.yml

    # Optional mount directive to mount hte config file
    # read-only or read-write. Defaults to `ro`.
    # Accepted values are `ro` or `rw`
    config_mount: ro

  # The Legacy AWS Credentials integration mounts your
  # ~/.aws/config and ~/.aws/credentials files so that your
  # AWS Profiles are available within the container.
  legacy_aws_credentials:
    # Enable or disable the AWS Profile integration
    enabled: true

  # The Ops Utils integration mounts the ops-sop/v4/utils
  # directory into the container at /root/ops-utils
  ops_utils:
    # Enable or disable the ops-utils integration
    # Default: true, switch to false to disable.
    enabled: true

    # Path to the ops-sop/v4/utils directory
    # This is required for the feature to work - no default value
    source_dir: /path/to/ops-sop/v4/utils

    # Optional mount option directive to mount the directory
    # read-only or read-write. Defaults to `ro`. Accepted
    # values are `rw` or `ro`
    mount_options: ro

  # The OSDCTL integration mounts your osdctl configuration
  # and optional vault token into the container
  osdctl:
    # Enable or disable the osdctl integration
    # Default: true, switch to false to disable.
    enabled: true

    # Path to the osdctl config file
    # This is required for the feature to work
    # Defaults to '.config/osdctl' (relative to $HOME if not absolute)
    config_file: .config/osdctl

    # Path to the vault token file (optional)
    # Defaults to '.vault-token' (relative to $HOME if not absolute)
    token_file: .vault-token

    # Optional mount option directive for the config file
    # read-only or read-write. Defaults to `ro`. Accepted
    # values are `rw` or `ro`
    config_mount_options: ro

    # Optional mount option directive for the token file
    # read-only or read-write. Defaults to `rw`. Accepted
    # values are `rw` or `ro`
    token_mount_options: rw

  # The PagerDuty integration mounts a pagerduty config file
  # for use of the pd-cli within the container.
  pagerduty:
    # Enable or disable the pagerduty integration
    # Default: true, switch to false to disable.
    enabled: true

    # Optional path to the token file. Defaults to
    # ~/.config/pagerduty-cli/config.json. Also automatically
    config_file: ~/.config/pagerduty-cli/config.json

    # Optional mount option directive to mount the config file
    # read-only or read-write. Defaults to `rw`. Accepted
    # values are `rw` or `ro`
    config_mount: rw

  # The Personalization integration mounts your bash
  # personalizations (aliases, functions, etc.) into the container
  personalization:
    # Enable or disable the personalization integration
    # Default: true, switch to false to disable.
    enabled: true

    # Path to the directory or file containing your personalizations
    # This is required for the feature to work
    # Can be either a directory or a single file
    source: /path/to/personalizations

    # Optional mount option directive to mount the personalization
    # read-only or read-write. Defaults to `ro`. Accepted
    # values are `rw` or `ro`
    mount_options: ro

  # The Persistent Histories integration provides per-cluster
  # persistent bash history, maintaining separate command histories
  # for each cluster you work with
  persistent_histories:
    # Enable or disable the persistent histories integration
    # Default: false, must be explicitly enabled.
    enabled: false

    # Path to the storage directory where cluster histories will be saved
    # Defaults to '.config/ocm-container/per-cluster-persistent'
    # Can be either an absolute path or relative to $HOME
    # if this storage directory doesn't exist, this feature will error out
    storage_dir: .config/ocm-container/per-cluster-persistent

  # The Image Cache integration provides persistent container image
  # caching, improving startup times by reusing previously pulled images
  image_cache:
    # Enable or disable the image cache integration
    # Default: false, must be explicitly enabled.
    enabled: false

    # Path to the storage directory where container images will be cached
    # Defaults to '.config/ocm-container/images'
    # Can be either an absolute path or relative to $HOME
    storage_dir: .config/ocm-container/images

  # The Backplane integration mounts your backplane configuration
  # file into the container for seamless use of backplane CLI tools
  backplane:
    # Enable or disable the backplane integration
    # Default: true
    enabled: true

    # Optional path to the backplane config file
    # Defaults to '.config/backplane/config.json'
    # Can be either an absolute path or relative to $HOME
    # Note: BACKPLANE_CONFIG environment variable takes priority over this setting
    config_file: .config/backplane/config.json

# The Ports configuration provides port forwarding capabilities,
# allowing you to expose container ports to your host system and
# access services running inside the container
ports:
  # Enable or disable all port forwarding
  # Default: true
  enabled: true

  # Console port configuration
  # This port is used for accessing web consoles or services like
  # `ocm backplane console` running inside the container
  console:
    # Enable or disable console port forwarding
    # Default: true
    enabled: true

    # Container port to bind for console access
    # The actual host port will be randomly assigned by the container engine
    # and written to /tmp/portmap inside the container
    # Default: 9999
    port: 9999
